name: Package Application with Pyinstaller

on:
  push:
    branches: [ master ]
    tags: [ v* ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version:
        description: "Version (semantic)"
        required: true
        default: "X.X"

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        os: [ 'windows', 'linux' ]
        app: [ 'gui', 'cli' ]
    steps:
      - uses: actions/checkout@v4
      - name: Package Application
        run: |
          docker run \
            --volume "$(pwd):/src/" \
            --env SPECFILE=./shamela2epub${{ matrix.app == 'gui' && 'gui' || '' }}.spec \
            --entrypoint /bin/sh ghcr.io/batonogov/pyinstaller-${{ matrix.os }}:v4.2.6 \
            -c "if [ -f /wine/drive_c/Python3/Lib/shutil.py ]; then sed -i 's/if hasattr(_winapi, \"CopyFile2\"):/if False:/g' /wine/drive_c/Python3/Lib/shutil.py; fi && \
                cat requirements-${{ matrix.app }}.txt | cut -d ';' -f 1 > requirements.txt && \
                /entrypoint.sh && \
                mv dist/shamela2epub$(if [[ "${{ matrix.app }}" == 'gui' ]]; then echo 'gui'; fi)$(if [[ "${{ matrix.os }}" == 'windows' ]]; then echo '.exe'; fi) dist/shamela2epub$(if [[ "${{ matrix.app }}" == 'gui' ]]; then echo 'gui'; fi)_${{ matrix.os }}$(if [[ "${{ matrix.os }}" == 'windows' ]]; then echo '.exe'; fi) && \
                ls -R dist/"
      - uses: actions/upload-artifact@v4
        if: github.actor != 'dependabot[bot]'
        with:
          name: shamela2epub${{ matrix.app == 'gui' && 'gui' || '' }}_${{ matrix.os }}${{ matrix.os == 'windows' && '.exe' || '' }}
          path: dist/shamela2epub*
  release:
    runs-on: ubuntu-latest
    needs: [ build ]
    if: (github.actor != 'dependabot[bot]' && github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v')) || github.event.inputs.version
    steps:
      - uses: actions/download-artifact@v3
      - name: Display structure of downloaded files
        run: ls -R
      - name: Set release name to tag name or datetime
        id: release
        run: |
          echo ${{ github.ref }}
          ref='refs/tags/v'
          if [[ ${{ github.ref }} == *${ref}* ]]; then
            echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          fi
      - name: Release
        uses: ncipollo/release-action@v1.13.0
        with:
          allowUpdates: true
          commit: 'master'
          tag: ${{ steps.release.outputs.version }}
          name: ${{ steps.release.outputs.version }}
          artifacts: '*/*.zip'
