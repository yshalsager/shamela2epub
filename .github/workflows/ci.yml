name: Package Application with Pyinstaller

on:
  push:
    branches: [ master ]
    tags: [ v* ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version:
        description: "Version (semantic)"
        required: true
        default: "X.X"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ 'windows-latest', 'macos-latest', 'ubuntu-latest' ]
        python-version: [ '3.12' ]
        poetry-version: [ "1.8.2" ]
        variant: [ 'main', 'gui' ]
        architecture: [ 'x64' ]
        include:
          - os: 'windows-latest'
            compress_cmd: 'tar.exe -acf'
            file_pattern: 'dist/shamela2epub*'
          - os: 'macos-latest'
            compress_cmd: 'zip -r9'
            file_pattern: 'dist/shamela2epub*.app'
            non_gui_file_pattern: 'dist/shamela2epub'
          - os: 'ubuntu-latest'
            compress_cmd: 'zip -r9'
            file_pattern: 'dist/shamela2epub*'
          - variant: 'main'
            install_cmd: 'poetry install --with main --with dev'
          - variant: 'gui'
            install_cmd: 'poetry install --with main --with dev --with gui'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}
      - name: Install Poetry
        uses: abatilo/actions-poetry@v3
        with:
          poetry-version: ${{ matrix.poetry-version }}
      - name: Setup a local virtual environment
        run: |
          poetry config virtualenvs.create true --local
          poetry config virtualenvs.in-project true --local
      - name: Caching
        uses: actions/cache@v4
        with:
          path: ./.venv
          key: venv-${{ hashFiles('poetry.lock') }}
      - name: Install requirements
        run: ${{ matrix.install_cmd }}
      - name: Package Application
        run: poetry run pyinstaller shamela2epub${{ matrix.variant == 'gui' && 'gui' || '' }}.spec
      - name: Display structure of files
        run: ls -R
      - name: Compress
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "macos-latest" && "${{ matrix.variant }}" == "main" ]]; then
            ${{ matrix.compress_cmd }} shamela2epub-${{ runner.os }}${{ matrix.variant == 'gui' && '-gui' || '' }}.zip ${{ matrix.non_gui_file_pattern }}
          else
            ${{ matrix.compress_cmd }} shamela2epub-${{ runner.os }}${{ matrix.variant == 'gui' && '-gui' || '' }}.zip ${{ matrix.file_pattern }}
          fi
      - uses: actions/upload-artifact@v4
        if: github.actor != 'dependabot[bot]'
        with:
          name: shamela2epub-${{ runner.os }}${{ matrix.variant == 'gui' && '-gui' || '' }}.zip
          path: shamela2epub-${{ runner.os }}${{ matrix.variant == 'gui' && '-gui' || '' }}.zip

  release:
    runs-on: ubuntu-latest
    needs: [ build ]
    if: (github.actor != 'dependabot[bot]' && github.event_name != 'pull_request' && startsWith(github.ref, 'refs/tags/v')) || github.event.inputs.version
    steps:
      - uses: actions/download-artifact@v4
      - name: Display structure of downloaded files
        run: ls -R
      - name: Set release name to tag name or datetime
        id: release
        run: |
          echo ${{ github.ref }}
          ref='refs/tags/v'
          if [[ ${{ github.ref }} == *${ref}* ]]; then
            echo "version=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT
          elif [[ -n "${{ github.event.inputs.version }}" ]]; then
            echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          else
            echo "version=$(date +'%Y%m%d-%H%M%S')" >> $GITHUB_OUTPUT
          fi
      - name: Release
        uses: ncipollo/release-action@v1.14.0
        with:
          allowUpdates: true
          commit: 'master'
          tag: ${{ steps.release.outputs.version }}
          name: ${{ steps.release.outputs.version }}
          artifacts: '*/*.zip'
